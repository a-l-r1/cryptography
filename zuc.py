from typing import Iterable, Tuple

from finite_field import GF2Power31


class _ZUCLFSR(object):
    _lfsr_length = 16
    _lfsr_element_bit_length = 31
    _lfsr_element_bitmask = (1 << _lfsr_element_bit_length) - 1
    _key_length = 128 // 8
    _iv_length = 128 // 8

    _d_table = [
        0b100010011010111, 0b010011010111100, 0b110001001101011, 0b001001101011110, 0b101011110001001,
        0b011010111100010, 0b111000100110101, 0b000100110101111, 0b100110101111000, 0b010111100010011,
        0b110101111000100, 0b001101011110001, 0b101111000100110, 0b011110001001101, 0b111100010011010,
        0b100011110101100
    ]

    def __init__(self: "_ZUCLFSR") -> None:
        super(_ZUCLFSR, self).__init__()
        self.data = [GF2Power31(0) for _ in range(self._lfsr_length)]

    def load_key(self: "_ZUCLFSR", k: bytes, iv: bytes):
        self.data = list(map(GF2Power31,
                             ((k[i] << 23) | (self._d_table[i] << 8) | iv[i] for i in range(self._lfsr_length))
                             ))

    def _lshift(self: "_ZUCLFSR", new_element: GF2Power31) -> None:
        self.data = [self.data[i] if i < self._lfsr_length else new_element
                     for i in range(1, self._lfsr_length + 1)]

    def initialization_mode(self: "_ZUCLFSR", u: GF2Power31) -> None:
        v = GF2Power31(2 ** 15) * self.data[15] + GF2Power31(2 ** 17) * self.data[13] + \
            GF2Power31(2 ** 21) * self.data[10] + GF2Power31(2 ** 20) * self.data[4] + \
            GF2Power31(1 + 2 ** 8) * self.data[0]

        s_16 = v + u
        if s_16.data == 0:
            s_16 = GF2Power31(self._lfsr_element_bitmask)

        self._lshift(s_16)

    def work_mode(self: "_ZUCLFSR") -> None:
        s_16 = GF2Power31(2 ** 15) * self.data[15] + GF2Power31(2 ** 17) * self.data[13] + \
               GF2Power31(2 ** 21) * self.data[10] + GF2Power31(2 ** 20) * self.data[4] + \
               GF2Power31(1 + 2 ** 8) * self.data[0]

        if s_16.data == 0:
            s_16 = GF2Power31(self._lfsr_element_bitmask)

        self._lshift(s_16)

    def _get_s_h(self: "_ZUCLFSR", index: int):
        return (self.data[index].data & 0x7fff8000) >> 15

    def _get_s_l(self: "_ZUCLFSR", index: int):
        return self.data[index].data & 0x0000ffff

    @staticmethod
    def _h_l_concatenate(h: int, l: int):
        return (h << 16) | l

    def bit_reconstruction(self: "_ZUCLFSR") -> Tuple[int, int, int, int]:
        x_0 = self._h_l_concatenate(self._get_s_h(15), self._get_s_l(14))
        x_1 = self._h_l_concatenate(self._get_s_l(11), self._get_s_h(9))
        x_2 = self._h_l_concatenate(self._get_s_l(7), self._get_s_h(5))
        x_3 = self._h_l_concatenate(self._get_s_l(2), self._get_s_h(0))

        return x_0, x_1, x_2, x_3

    def __str__(self: "_ZUCLFSR") -> str:
        return '_ZUCLFSR(' + ', '.join(map(lambda x: hex(x.data), self.data)) + ')'


class _FState(object):
    _s_table = [
        [
            0x3E, 0x72, 0x5B, 0x47, 0xCA, 0xE0, 0x00, 0x33, 0x04, 0xD1, 0x54, 0x98, 0x09, 0xB9, 0x6D, 0xCB, 0x7B, 0x1B,
            0xF9, 0x32, 0xAF, 0x9D, 0x6A, 0xA5, 0xB8, 0x2D, 0xFC, 0x1D, 0x08, 0x53, 0x03, 0x90, 0x4D, 0x4E, 0x84, 0x99,
            0xE4, 0xCE, 0xD9, 0x91, 0xDD, 0xB6, 0x85, 0x48, 0x8B, 0x29, 0x6E, 0xAC, 0xCD, 0xC1, 0xF8, 0x1E, 0x73, 0x43,
            0x69, 0xC6, 0xB5, 0xBD, 0xFD, 0x39, 0x63, 0x20, 0xD4, 0x38, 0x76, 0x7D, 0xB2, 0xA7, 0xCF, 0xED, 0x57, 0xC5,
            0xF3, 0x2C, 0xBB, 0x14, 0x21, 0x06, 0x55, 0x9B, 0xE3, 0xEF, 0x5E, 0x31, 0x4F, 0x7F, 0x5A, 0xA4, 0x0D, 0x82,
            0x51, 0x49, 0x5F, 0xBA, 0x58, 0x1C, 0x4A, 0x16, 0xD5, 0x17, 0xA8, 0x92, 0x24, 0x1F, 0x8C, 0xFF, 0xD8, 0xAE,
            0x2E, 0x01, 0xD3, 0xAD, 0x3B, 0x4B, 0xDA, 0x46, 0xEB, 0xC9, 0xDE, 0x9A, 0x8F, 0x87, 0xD7, 0x3A, 0x80, 0x6F,
            0x2F, 0xC8, 0xB1, 0xB4, 0x37, 0xF7, 0x0A, 0x22, 0x13, 0x28, 0x7C, 0xCC, 0x3C, 0x89, 0xC7, 0xC3, 0x96, 0x56,
            0x07, 0xBF, 0x7E, 0xF0, 0x0B, 0x2B, 0x97, 0x52, 0x35, 0x41, 0x79, 0x61, 0xA6, 0x4C, 0x10, 0xFE, 0xBC, 0x26,
            0x95, 0x88, 0x8A, 0xB0, 0xA3, 0xFB, 0xC0, 0x18, 0x94, 0xF2, 0xE1, 0xE5, 0xE9, 0x5D, 0xD0, 0xDC, 0x11, 0x66,
            0x64, 0x5C, 0xEC, 0x59, 0x42, 0x75, 0x12, 0xF5, 0x74, 0x9C, 0xAA, 0x23, 0x0E, 0x86, 0xAB, 0xBE, 0x2A, 0x02,
            0xE7, 0x67, 0xE6, 0x44, 0xA2, 0x6C, 0xC2, 0x93, 0x9F, 0xF1, 0xF6, 0xFA, 0x36, 0xD2, 0x50, 0x68, 0x9E, 0x62,
            0x71, 0x15, 0x3D, 0xD6, 0x40, 0xC4, 0xE2, 0x0F, 0x8E, 0x83, 0x77, 0x6B, 0x25, 0x05, 0x3F, 0x0C, 0x30, 0xEA,
            0x70, 0xB7, 0xA1, 0xE8, 0xA9, 0x65, 0x8D, 0x27, 0x1A, 0xDB, 0x81, 0xB3, 0xA0, 0xF4, 0x45, 0x7A, 0x19, 0xDF,
            0xEE, 0x78, 0x34, 0x60
        ],
        [
            0x55, 0xC2, 0x63, 0x71, 0x3B, 0xC8, 0x47, 0x86, 0x9F, 0x3C, 0xDA, 0x5B, 0x29, 0xAA, 0xFD, 0x77, 0x8C, 0xC5,
            0x94, 0x0C, 0xA6, 0x1A, 0x13, 0x00, 0xE3, 0xA8, 0x16, 0x72, 0x40, 0xF9, 0xF8, 0x42, 0x44, 0x26, 0x68, 0x96,
            0x81, 0xD9, 0x45, 0x3E, 0x10, 0x76, 0xC6, 0xA7, 0x8B, 0x39, 0x43, 0xE1, 0x3A, 0xB5, 0x56, 0x2A, 0xC0, 0x6D,
            0xB3, 0x05, 0x22, 0x66, 0xBF, 0xDC, 0x0B, 0xFA, 0x62, 0x48, 0xDD, 0x20, 0x11, 0x06, 0x36, 0xC9, 0xC1, 0xCF,
            0xF6, 0x27, 0x52, 0xBB, 0x69, 0xF5, 0xD4, 0x87, 0x7F, 0x84, 0x4C, 0xD2, 0x9C, 0x57, 0xA4, 0xBC, 0x4F, 0x9A,
            0xDF, 0xFE, 0xD6, 0x8D, 0x7A, 0xEB, 0x2B, 0x53, 0xD8, 0x5C, 0xA1, 0x14, 0x17, 0xFB, 0x23, 0xD5, 0x7D, 0x30,
            0x67, 0x73, 0x08, 0x09, 0xEE, 0xB7, 0x70, 0x3F, 0x61, 0xB2, 0x19, 0x8E, 0x4E, 0xE5, 0x4B, 0x93, 0x8F, 0x5D,
            0xDB, 0xA9, 0xAD, 0xF1, 0xAE, 0x2E, 0xCB, 0x0D, 0xFC, 0xF4, 0x2D, 0x46, 0x6E, 0x1D, 0x97, 0xE8, 0xD1, 0xE9,
            0x4D, 0x37, 0xA5, 0x75, 0x5E, 0x83, 0x9E, 0xAB, 0x82, 0x9D, 0xB9, 0x1C, 0xE0, 0xCD, 0x49, 0x89, 0x01, 0xB6,
            0xBD, 0x58, 0x24, 0xA2, 0x5F, 0x38, 0x78, 0x99, 0x15, 0x90, 0x50, 0xB8, 0x95, 0xE4, 0xD0, 0x91, 0xC7, 0xCE,
            0xED, 0x0F, 0xB4, 0x6F, 0xA0, 0xCC, 0xF0, 0x02, 0x4A, 0x79, 0xC3, 0xDE, 0xA3, 0xEF, 0xEA, 0x51, 0xE6, 0x6B,
            0x18, 0xEC, 0x1B, 0x2C, 0x80, 0xF7, 0x74, 0xE7, 0xFF, 0x21, 0x5A, 0x6A, 0x54, 0x1E, 0x41, 0x31, 0x92, 0x35,
            0xC4, 0x33, 0x07, 0x0A, 0xBA, 0x7E, 0x0E, 0x34, 0x88, 0xB1, 0x98, 0x7C, 0xF3, 0x3D, 0x60, 0x6C, 0x7B, 0xCA,
            0xD3, 0x1F, 0x32, 0x65, 0x04, 0x28, 0x64, 0xBE, 0x85, 0x9B, 0x2F, 0x59, 0x8A, 0xD7, 0xB0, 0x25, 0xAC, 0xAF,
            0x12, 0x03, 0xE2, 0xF2
        ],
        None,
        None
    ]
    _s_table[2] = _s_table[0]
    _s_table[3] = _s_table[1]

    def __init__(self: "_FState", r_1: int, r_2: int) -> None:
        super(_FState, self).__init__()

        self.r_1 = r_1
        self.r_2 = r_2

    @staticmethod
    def _get_l(n: int) -> int:
        return n & 0x0000ffff

    @staticmethod
    def _get_h(n: int) -> int:
        return (n & 0xffff0000) >> 16

    @staticmethod
    def _h_l_concatenate(h: int, l: int) -> int:
        return (h << 16) | l

    @staticmethod
    def _32_bit_left_rotate(n: int, bit_count: int) -> int:
        return ((n << bit_count) | (n >> (32 - bit_count))) & 0xffffffff

    @classmethod
    def _l1(cls: "_FState", x: int) -> int:
        return x ^ cls._32_bit_left_rotate(x, 2) ^ cls._32_bit_left_rotate(x, 10) ^ \
               cls._32_bit_left_rotate(x, 18) ^ cls._32_bit_left_rotate(x, 24)

    @classmethod
    def _l2(cls: "_FState", x: int) -> int:
        return x ^ cls._32_bit_left_rotate(x, 8) ^ cls._32_bit_left_rotate(x, 14) ^ \
               cls._32_bit_left_rotate(x, 22) ^ cls._32_bit_left_rotate(x, 30)

    @classmethod
    def _s_single(cls: "_FState", i: int, x: int) -> int:
        return cls._s_table[i][x]

    @classmethod
    def _s(cls: "_FState", x: int) -> int:
        x_0 = (x & 0xff000000) >> 24
        x_1 = (x & 0x00ff0000) >> 16
        x_2 = (x & 0x0000ff00) >> 8
        x_3 = x & 0x000000ff

        y_0, y_1, y_2, y_3 = map(lambda x_: cls._s_single(x_[0], x_[1]), enumerate((x_0, x_1, x_2, x_3)))

        y = (y_0 << 24) | (y_1 << 16) | (y_2 << 8) | y_3
        return y

    def f(self: "_FState", x_0: int, x_1: int, x_2: int) -> int:
        w = ((x_0 ^ self.r_1) + self.r_2) & 0xffffffff
        w_1 = (self.r_1 + x_1) & 0xffffffff
        w_2 = self.r_2 ^ x_2
        self.r_1 = self._s(self._l1(self._h_l_concatenate(self._get_l(w_1), self._get_h(w_2))))
        self.r_2 = self._s(self._l2(self._h_l_concatenate(self._get_l(w_2), self._get_h(w_1))))

        return w

    def __str__(self: "_FState") -> str:
        return '_FState(' + 'self.r_1=' + hex(self.r_1) + ', ' + 'self.r_2=' + hex(self.r_2) + ')'


def gen_key_iter_infinite(k: bytes, iv: bytes) -> Iterable[int]:
    _key_length = 128 // 8
    _iv_length = 128 // 8
    _init_round_count = 32

    if len(k) != _key_length:
        raise ValueError("encrypt(): key length error")

    if len(iv) != _iv_length:
        raise ValueError("encrypt(): iv length error")

    lfsr = _ZUCLFSR()
    f_state = _FState(0, 0)

    lfsr.load_key(k, iv)

    for i in range(_init_round_count):
        x_0, x_1, x_2, x_3 = lfsr.bit_reconstruction()
        w = f_state.f(x_0, x_1, x_2)
        lfsr.initialization_mode(GF2Power31(w >> 1))

    x_0, x_1, x_2, x_3 = lfsr.bit_reconstruction()
    f_state.f(x_0, x_1, x_2)
    lfsr.work_mode()

    while True:
        x_0, x_1, x_2, x_3 = lfsr.bit_reconstruction()
        z = f_state.f(x_0, x_1, x_2) ^ x_3
        lfsr.work_mode()

        yield (z & 0xff000000) >> 24
        yield (z & 0x00ff0000) >> 16
        yield (z & 0x0000ff00) >> 8
        yield z & 0x000000ff


def gen_key_iter(k: bytes, iv: bytes, byte_length: int) -> Iterable[int]:
    g = gen_key_iter_infinite(k, iv)

    # make g an iterator, in order to make types match
    g = iter(g)

    count = 1

    while count <= byte_length:
        yield next(g)
        count += 1

    return


def encrypt(k: bytes, iv: bytes, m: bytes) -> bytes:
    length = len(m)
    return bytes(map(lambda x, y: x ^ y, gen_key_iter(k, iv, length), m))


def decrypt(k: bytes, iv: bytes, c: bytes) -> bytes:
    return encrypt(k, iv, c)
