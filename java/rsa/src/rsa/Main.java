package rsa;

import java.io.IOException;
import java.nio.file.Path;

public class Main {

    public static void main(String[] args) {
        BigNum[][] key;

        boolean usePreConfiguredKeys = true;
        int bitLength = 1024;

        if (usePreConfiguredKeys) {
            String p = "0xb2e52bc_51d3808d_99f674c0_b230da9e_a8c2e646_a2559663_03f263d6_220cb561_acd2df5b_0664e01e_615d587a_10129732_3abc1beb_fa681940_c1c9c7cb_f46077bf_62d284ba_995d13b0_f1a827d6_edcfa47d_f0a69b3f_159b2855_19ac3733_78d7144e_b574b421_48de399f_16f5551a_e98862d9_6d61510a_84116998_075b0636_42e78c7f";
            String q = "0xd87c9f7_26df83e4_a0eb8fc5_07f17c60_8ec96677_3f57c562_76bf1544_88e4ad63_dc0663eb_ecfa2a4e_4375a7fc_72e4ca03_36832714_0a18e3e4_214410fd_d4bd7895_5a7c80f6_466ec2d5_4919d81b_e87db2ec_c3a9e737_4d3b1c24_bd712c49_c2c0358a_d0878b53_3c539cc9_62445996_5f3cea7a_d52720ce_eba2703c_dc2047b5_8b654f4b";
            BigNum pBigNum = new BigNum(p);
            BigNum qBigNum = new BigNum(q);

            key = RSA.genKeyPair(pBigNum, qBigNum);
        } else {
            key = RSA.genKeyPair(bitLength);
        }

        BigNum[] privateKey = key[0];
        BigNum[] publicKey = key[1];

        Path privateKeyPath = Path.of("data/privateKey");
        Path publicKeyPath = Path.of("data/publicKey");

        try {
            RSA.writePrivateKey(privateKeyPath, privateKey);
            RSA.writePublicKey(publicKeyPath, publicKey);

            Path plainTextPath = Path.of("data/plaintext");
            Path cipherTextPath = Path.of("data/ciphertext");
            Path recoveredPlainTextPath = Path.of("data/plaintext-recovered");

            RSA.encryptFile(plainTextPath, cipherTextPath, publicKeyPath);
            RSA.decryptFile(recoveredPlainTextPath, cipherTextPath, privateKeyPath);

            Path plainTextPathOAEP = Path.of("data/plaintext_oaep");
            Path cipherTextPathOAEP = Path.of("data/ciphertext_oaep");
            Path recoveredPlainTextPathOAEP = Path.of("data/plaintext-recovered_oaep");

            RSA.encryptFileOAEP(plainTextPathOAEP, cipherTextPathOAEP, publicKeyPath, "test");
            RSA.decryptFileOAEP(recoveredPlainTextPathOAEP, cipherTextPathOAEP, privateKeyPath, "test");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
